package 实验课一;
import java.util.Arrays;
import java.util.Random;

public class a {
	public static void insertSortV1(int[] array) {
		for (int i = 0; i < array.length - 1; i++) {
			// 有序区间 	[0, i]
			// 无序区间		[i + 1, array.length)
			// 待插入的数据是 array[i + 1]
			// 插入过程在有序区间内查找
			
			int key = array[i + 1];
			int j;
			for (j = i; j >= 0; j--) {
				if (key >= array[j]) {
					break;
				}
			}
			
			// j + 1 放 key 的位置
			for (int k = i; k > j; k--) {
				array[k + 1] = array[k];
			}
			
			array[j + 1] = key;
		}
	}
	
	public static void insertSort(double[] array) {
		for (int i = 0; i < array.length - 1; i++) {
			double key = array[i + 1];
			int j;
			for (j = i; j >= 0 && key < array[j]; j--) {
				array[j + 1] = array[j];
			}
			array[j + 1] = key;
		}
	}

	private static void insertSortWithGap(double[] array, int gap) {
		for (int i = 0; i < array.length - gap; i++) {
			double key = array[i + gap];
			int j;
			for (j = i; j >= 0 && key < array[j]; j -= gap) {
				array[j + gap] = array[j];
			}
			array[j + gap] = key;
		}
	}

	public static void shellSort(double[] array) {
	    int gap = array.length;
	    while (true) {
	        gap = gap / 3 + 1;
	        insertSortWithGap(array, gap);
	        if (gap == 1) {
	            return;
			}
		}
	}

	private static int[] buildSortedArray(int n) {
		int[] array = new int[n];
	    for (int i = 0; i < n; i++) {
	        array[i] = i;
		}

	    return array;
	}

	private static int[] buildReversedSortedArray(int n) {
		int[] array = new int[n];
		for (int i = 0; i < n; i++) {
			array[i] = n - i;
		}

		return array;
	}

	private static double[] buildRandomArray(int n) {
		Random random = new Random(20190828);
		double[] array = new double[n];
		for (int i = 0; i < n; i++) {
		    array[i] = random.nextDouble();
		}

		return array;
	}

	private static int[] buildEqualsArray(int n) {
		int[] array = new int[n];
		for (int i = 0; i < n; i++) {
			array[i] = n;
		}

		return array;
	}

	public static void selectSort(double[] array) {
		// 每次选最大的数
	    for (int i = 0; i < array.length - 1; i++) {
			// 无序区间	[0, array.length - i)
	        // 有序区间	[array.lenngth - i, array.length)
            int max = 0;
            for (int j = 1; j < array.length - i; j++) {
                if (array[j] >= array[max]) {
                    max = j;
				}
			}

            // 交换最大的数和无序区间的最后一个数
            swap(array, max, array.length - i - 1);
		}
	}

	private static void swap(double[] array, int i, int j) {
	    double t = array[i];
	    array[i] = array[j];
	    array[j] = t;
	}
/*
	public static void heapSort(int[] array) {
	    createHeap(array, array.length);
	    for (int i = 0; i < array.length - 1; i++) {
	        // 无序 [0, array.length - i)
			swap(array, 0, array.length - i - 1);
			// 无序 [0, array.length - i - 1)
			// 无序区间的长度: array.length - i - 1
			heapify(array, array.length - i - 1, 0);
		}
	}
*/
	public static void main(String[] args) {
	    // 有序 | 无序 | 随机值 | 完全相等的
        double[] array;
		array = buildRandomArray(20);
		//System.out.println(Arrays.toString(array));
        long begin = System.nanoTime();	// 纳秒
        
		insertSort(array);
		//shellSort(array);
		//selectSort(array);
		long end = System.nanoTime();	// 纳秒
		System.out.println(end - begin);
		//System.out.println(Arrays.toString(array));
	}
}