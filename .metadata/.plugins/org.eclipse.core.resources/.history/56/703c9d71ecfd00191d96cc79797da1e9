package test_113;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Solution {
    public List<Integer> pancakeSort(int[] A) {
    	List<Integer> list=new ArrayList<>();
    	int[] array=Arrays.copyOf(A, A.length);
    	int[] temp=Arrays.copyOf(A, A.length);
    	Arrays.sort(temp);
        boolean flag=true;
        for(int i=0;i<array.length;i++) {
        	if(array[i]!=temp[i]) {
        		flag=false;
        		break;
        	}
        }
        if(flag) {
        	return null;
        }
		int val=array.length;
		while(val>2) {
		//大的数字找到下标位置，交换到第一位
			//放在最后一个未排序位置
		int key=Arrays.binarySearch(array, temp[val-1])+1;
		reverse(array,key);
        reverse(array,val);
		list.add(key);
        list.add(val);
		val--;
		}
		reverse(array,2); 
		list.add(2);
    	return list;
    }

	private void reverse(int[] array, int key) {
		if(key>array.length) return;
		if(key==1) return;
		// TODO 自动生成的方法存根
		int front=0,last=key-1;
		while(front<last) {
			swap(array,front,last);
			front++;
			last--;
		}
	}

	private void swap(int[] array, int front, int last) {
		// TODO 自动生成的方法存根
		int key=array[front];
		array[front]=array[last];
		array[last]=key;
	}
	
	public static void main(String[] args) {
		List<Integer> l1=new ArrayList<>();
		int[] array2= {3,2,4,1};
		Solution x=new Solution();
		l1=x.pancakeSort(array2);
		if(l1!=null) {
		for(int i:l1) {
			System.out.println(i);
		}
		}
	}
}